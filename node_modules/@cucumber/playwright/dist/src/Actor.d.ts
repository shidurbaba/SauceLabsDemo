export declare type Interaction<Answer = void> = (actor: Actor) => Answer;
export declare type PromiseInteraction<Answer = void> = (actor: Actor) => Promise<Answer>;
export declare type DefaultFunction<T> = () => T;
/**
 * An Actor represents a user interacting with the system.
 */
export default class Actor<World = unknown> {
    readonly world: World;
    readonly name: string;
    private readonly memory;
    constructor(world: World, name: string);
    remember<T>(key: string, value: T): void;
    recall<T>(key: string, defaultFunction?: DefaultFunction<T>): T;
    attemptsTo<Answer>(interaction: Interaction<Answer>): Answer;
    /**
     * Just a synonym for attemptsTo
     */
    ask<Answer>(question: Interaction<Answer>): Answer;
}
